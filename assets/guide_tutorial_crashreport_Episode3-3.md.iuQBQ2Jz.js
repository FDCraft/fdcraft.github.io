import{_ as e,c as i,o as d,ag as t}from"./chunks/framework.DPDPlp3K.js";const _=JSON.parse('{"title":"Invalid id 4096","description":"","frontmatter":{},"headers":[],"relativePath":"guide/tutorial/crashreport/Episode3-3.md","filePath":"guide/tutorial/crashreport/Episode3-3.md"}'),o={name:"guide/tutorial/crashreport/Episode3-3.md"};function s(r,a,n,l,p,c){return d(),i("div",null,a[0]||(a[0]=[t('<h1 id="invalid-id-4096" tabindex="-1">Invalid id 4096 <a class="header-anchor" href="#invalid-id-4096" aria-label="Permalink to &quot;Invalid id 4096&quot;">​</a></h1><p>这一类报错的特征是这样的：</p><div class="language-markdown vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">markdown</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">java.lang.RuntimeException: Invalid id 4096 - maximum id range exceeded.</span></span></code></pre></div><p>其字面意思是“无效的id 4096-超出了最大id范围”。</p><h2 id="原因" tabindex="-1">原因 <a class="header-anchor" href="#原因" aria-label="Permalink to &quot;原因&quot;">​</a></h2><p>为什么会发生这个问题呢？这就要提到MC如何处理物品的方式了。当一个Mod向MC加入（注册）物品或者方块时，MC会分配给这个物品或者方块一个id，如：<code>95</code>、<code>minecraft:white_stained_glass</code>。在1.12.2及以下，MC内部使用类似<code>95:0</code>的数字id与Metadata的组合来标识物品与方块；而1.13及以上，MC内部改为使用类似<code>minecraft:white_stained_glass</code>的字符串id来标识物品与方块，而Metadata被废弃，原本依靠Metadata区分的同id方块被拆分成不同字母id，也就是扁平化。（这点和指令不一样，从1.8开始指令使用字符串id，但内部依旧使用数字id）</p><p>而数字id是有上限的。MC只给数字id分配了12位（0-4095），因此一旦物品过多，id就会越界导致崩溃。</p><h2 id="解决方法" tabindex="-1">解决方法 <a class="header-anchor" href="#解决方法" aria-label="Permalink to &quot;解决方法&quot;">​</a></h2><p>一种解决方法是安装JEID或者NEID。它们将id范围拓展至32位从而解决了这个问题，但是它们往往会有副作用（例如因为id错乱一种方块全部变成了另一种方块、存档不能用MCEdit编辑等），并且一旦安装后就不能卸载，因此一般会在整合包刚开始组建时就安装上。</p><p>另一种方法是删除Mod。这个崩溃也经常发生在玩家向玩了一段时间的存档又加了Mod的时候，此时加上JEID或者NEID就有损坏存档的风险，最好的办法就是删除刚刚安装上的Mod。</p>',10)]))}const u=e(o,[["render",s]]);export{_ as __pageData,u as default};
